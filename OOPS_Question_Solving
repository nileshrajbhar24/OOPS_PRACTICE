#Basic Overloading:
#Write a Python class Calculator that has a method add() which can take either two or three numbers as input and return their sum.
#  ---Code--
class Calculator:
    def __init__(self,num1,num2):
        self.num1=num1
        self.num2=num2
    def add(self):
        return f"This is Sum of {self.num1} + {self.num2} = {self.num1 + self.num2} "

sum_of_number=Calculator(num1=10,num2=5)
sum_of_number.add()

#----OUTPUT-----
'This is Sum of 10 + 5 = 15 '

#Q2--Overloading with Different Data Types:
#Create a class Concatenator with a method join() that should accept either two strings or two lists and return their concatenation. 
#----code--
class Concatenator:
    def join(self, a, b):
        if type(a) == str and type(b) == str:
            return a + b
        if type(a) == list and type(b) == list:
            return a + b
        return "Invalid input"

c = Concatenator()

print(c.join("Hello ", "World"))
print(c.join([1, 2], [3, 4]))      
print(c.join("Hello", [1, 2]))

#-----OutPut-----
# Hello World
# [1, 2, 3, 4]
# Invalid input

#Q3--Default Arguments for Overloading Behavior:
#Implement a class AreaCalculator with a method calculate_area() that should return the area of a circle if given one argument (radius) or a rectangle if given two arguments (length and breadth).

#--code--
from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return f"Area of circle = π × {self.radius}^2 = {3.14 * self.radius ** 2}"

circle = Circle(radius=5)
print(circle.area())

# OutPut---
#Area of circle = π × 5^2 = 78.5

